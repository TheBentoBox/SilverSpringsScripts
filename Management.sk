#= Script-wide options and settings
options:
	ServerPrefix: &8&l[&7SSS&8&l] &3


#= Ensure all worlds have their values and gamerules set appropriately
on script load:
	delete {timeUntilRestart}
	delete {cancelNextRestart}
	loop worlds:
		execute console command "mvgamerule logAdminCommands false %loop-value%"
		execute console command "mvgamerule sendCommandFeedback false %loop-value%"
		execute console command "mvgamerule commandBlockOutput false %loop-value%"
		execute console command "mvgamerule announceAdvancements false %loop-value%"
		execute console command "mvmodify set difficulty hard %loop-value%"


#= Tag entities with their spawn reason so it can be detected later
on spawn:
	setKeyValueTag(event-entity, "SpawnReason", "%spawn reason%")
#= Also clear drops of mobs with a certain tag so we can be sure certain ones won't drop anything
on death of living entity:
	hasTag(victim, "ClearDrops") is true
	clear drops


#= Control automated restarts
command /cancelrestart:
	permission: skript.admin
	trigger:
		set {cancelNextRestart} to true
		send "{@ServerPrefix}The next automated restart will be canceled" to the player

every minute:
	if "%now%" contains "11:55":
		"%{cancelNextRestart}%" isn't "true"
		broadcast "{@ServerPrefix}The server will restart in 5 minutes."
		send all players title "" with subtitle "&3The server restarts in 5 minutes." for 2 seconds with 0 ticks fade in and 10 ticks fade out
		set {timeUntilRestart} to 5 minutes
	else if "%now%" contains "11:59":
		if {cancelNextRestart} is true:
			delete {cancelNextRestart}
			stop
		broadcast "{@ServerPrefix}The server will restart in 1 minute."
		loop players:
			"%loop-player's world%" is "Soulthief"
			make loop-player execute "ma leave"
			send "&cYou have been forced to leave the arena to ensure your inventory is not lost due to MobArena." to the loop-player
		send all players title "" with subtitle "&3The server restarts in 1 minute." for 2 seconds with 0 ticks fade in and 10 ticks fade out
		if {cancelNextRestart} is true:
			delete {cancelNextRestart}
			stop
		wait 50 seconds
		if {cancelNextRestart} is true:
			delete {cancelNextRestart}
			stop
		broadcast "{@ServerPrefix}10 seconds until restart, stop all crafting and similar actions!"
		send all players title "&310 seconds until restart." with subtitle  "&7Stop all crafting and similar actions!" for 2 seconds with 0 ticks fade in and 10 ticks fade out
		wait 7 seconds
		if {cancelNextRestart} is true:
			delete {cancelNextRestart}
			stop
		loop 3 times:
			broadcast "{@ServerPrefix}Restart in %4 - loop-number%..."
			send all players title "&3Restart in" with subtitle  "&7%4 - loop-number%..." for 2 seconds with 0 ticks fade in and 10 ticks fade out
			wait 1 second
		if {cancelNextRestart} is true:
			delete {cancelNextRestart}
			stop
		execute console command "/restart"


#= Prevent joining arenas if the player's inventory is too full or if the server is about to restart
on command:
	command is "ma" or "mobarena"
	first character of arguments is "j"
	event isn't cancelled

	if {timeUntilRestart} is set:
		cancel event
		send "&cThe server is restarting soon; please wait to join arenas until after the restart." to the player
	else if getFreeSpace(player) < 10:
		cancel event
		send "&cYou need at least 10 free inventory slots to join a Mob Arena (to hold the potential prizes afterwards!)" to the player
	else:
		saveInv(player)
	
#on gamemode change:
#	wait 1 tick
#	player's gamemode is creative
#	saveInv(player)


#= Keep track of when players were last damaged
# Used to limit command usage so people can't cheese
on script load:
	delete {lastDamageTime::*}
	delete {lastAttackTime::*}
on damage of player:
	set {lastDamageTime::%victim's uuid%} to now
on damage:
	attacker is a player
	set {lastAttackTime::%attacker's uuid%} to now
# Catch command execution to save people from using overly cheesy commands
on command:
	{lastDamageTime::%player's uuid%} is set
	if "%command%" is "afk":
		if player is afk:
			stop
		else if difference between {lastDamageTime::%player's uuid%} and now < 3 seconds:
			send "&cYou can't AFK since you've taken damage recently." to the player
			cancel event


#= Keep track of last chat message
# Avoids spam
# Stored 1 tick in future so other on chat events won't accidentally check this chat event
on script load:
	delete {lastChatMessage::*}
on chat:
	player doesn't have permission "skript.admin"
	if {lastChatMessage::%player's uuid%} isn't set:
		wait 1 tick
		set {lastChatMessage::%player's uuid%} to message
	else if message is {lastChatMessage::%player's uuid%}:
		cancel event
	else:
		wait 1 tick
		set {lastChatMessage::%player's uuid%} to message


#= Command to add warp aliases
command /warpalias <text> <text>:
	permission: skript.admin
	usage: /warpalias <warp to add alias for> <new alias>
	trigger:
		# Ensure that the warp even exists
		if file "plugins/Essentials/warps/%arg-1%.yml" exists:
			set {warpAliases::%arg-2%} to arg-1
			send "&6Set &c%arg-2%&6 as an alias for warp &c%arg-1%&6." to the command sender
		else:
			send "&cThat warp doesn't exist. Remember that warp names in this context are case-sensitive." to the command sender

on command:
	"%command%" is "warp"
	file "plugins/Essentials/warps/%arguments%.yml" doesn't exist
	{warpAliases::%arguments%} is set
	cancel event
	make player execute "warp %{warpAliases::%arguments%}%"


#= API functions for saving and restoring player inventories
function saveInv(p: player):
	execute console command "saveInv %{_p}%"
function restoreInv(p: player):
	execute console command "restoreInv %{_p}%"
command saveInv [<player=%player%>]:
	permission: skript.admin
	trigger:
		loop 41 times:
			set {invBackup::%player-argument's uuid%::%loop-number%} to slot loop-number - 1 of player-argument
		set {invBackup::%player-argument's uuid%::helmet} to amount of player-argument's helmet of player-argument's helmet
		set {invBackup::%player-argument's uuid%::chestplate} to 1 of player-argument's chestplate
		set {invBackup::%player-argument's uuid%::leggings} to 1 of player-argument's leggings
		set {invBackup::%player-argument's uuid%::boots} to 1 of player-argument's boots
		set {invBackup::%player-argument's uuid%::xp} to player-argument's xp
		set {invBackup::%player-argument's uuid%::health} to player-argument's health
		set {invBackup::%player-argument's uuid%::hunger} to player-argument's hunger
		set {invBackup::%player-argument's uuid%::saturation} to saturation of player-argument
		set {invBackup::%player-argument's uuid%::exhaustion} to player-argument's exhaustion
		send "&6Saved inventory of &c%player-argument%&6." to the command sender
command restoreInv [<player=%player%>]:
	permission: skript.admin
	trigger:
		loop 41 times:
			set slot loop-number - 1 of player-argument to {invBackup::%player-argument's uuid%::%loop-number%}
		set player-argument's helmet to {invBackup::%player-argument's uuid%::helmet}
		set player-argument's chestplate to {invBackup::%player-argument's uuid%::chestplate}
		set player-argument's leggings to {invBackup::%player-argument's uuid%::leggings}
		set player-argument's boots to {invBackup::%player-argument's uuid%::boots}
		set player-argument's xp to {invBackup::%player-argument's uuid%::xp}
		set player-argument's health to {invBackup::%player-argument's uuid%::health}
		set player-argument's hunger to {invBackup::%player-argument's uuid%::hunger}
		set saturation of player-argument to {invBackup::%player-argument's uuid%::saturation}
		set player-argument's exhaustion to {invBackup::%player-argument's uuid%::exhaustion}
		send "&6Restored inventory of &c%player-argument%&6." to the command sender
 
 
 #= Make mcMMO party chat messages get sent to console
 # They used to, and while we don't like to look at direct 1-on-1 messages, larger groups of
 # problem players tend to talk in parties a lot, so these messages are important to see.
on mcmmo party chat:
	send "[P]{%event-party%}(%event-player's display name%) %event-string%" to console


#= Useful	shorthand commands for interacting with entity NBT tags without needing to use inline commands.
command /nbt [<text="get">] [<text="">] [<text="">]:
	executable by: players
	permission: skript.admin
	trigger:
		# Send an error so they know it doesn't think they're looking at something
		# (Sometimes it can feel like somethings you're target but you're not actually hovering its hitbox)
		if check |player's target isn't set|->|player's tool is air|:
			"%text-argument-1%%text-argument-2%%text-argument-3%" isn't "get"
			send "&cNo target and no held item." to the player
			stop
		
		if player's target is set:
			set {_targ} to player's target
			set {_nbt} to nbt of player's target
		else if player's tool isn't air:
			set {_targ} to type of player's tool
			set {_nbt} to nbt of player's tool
		
		# If the first argument is "get", retrieve the entity's NBT (or a specific tag if one is asked for)
		if check |text-argument-1 is "get"|->|{_nbt} is set|:
			# If no arg is given, just send all of its NBT
			if text-argument-2 is "":
				send "&6NBT of %{_targ}%:&f %{_nbt}%" to the player
			# Otherwise, try to send the specific tag given
			else:
				set {_tag} to tag "%text-argument-2%" of {_nbt}
				
				# Catch if the tag wasn't found on the mob
				if {_tag} isn't set:
					send "&cTag '%text-argument-2%' not found on the %{_targ}%. Remember that tags are case-sensitive, and that even real tags can sometimes not exist (which equates to it being ""false"")." to the player
				else:
					send "&6Value for %text-argument-2% of %{_targ}%:&f %{_tag}%" to the player
		
		# If it's "set", set tag text-argument-2 to value text-argument-3
		else if text-argument-1 is "set":
			if check |text-argument-2 isn't ""|->|text-argument-3 isn't ""|:
				if {_targ} is type of player's tool:
					add "{%text-argument-2%:%text-argument-3%}" to nbt of player's tool
				else:
					add "{%text-argument-2%:%text-argument-3%}" to nbt of target
				send "&6Set tag %text-argument-2% of %{_targ}% to&c %text-argument-3%" to the player
			else:
				send "&cBoth a tag and a value must be provided, e.g. /nbt set Health 3." to the player
		
		# If it's "add", just add the arguments to its NBT (assume they wrote it properly)
		else if text-argument-1 is "add":
			if {_targ} is type of player's tool:
				add "{%text-argument-2% %text-argument-3%}" to nbt of player's tool
			else:
				add "{%text-argument-2% %text-argument-3%}" to nbt of target
			send "&6Attempted to add &c{%text-argument-2% %text-argument-3%}&6 to nbt of %{_targ}%." to the player
		
		else:
			send "&cUsage is /nbt [get|set|add] [values] while looking at an entity:" to the player
			send "&cget [tag|:&7 Retuns the value of 'tag', or all NBT if a tag isn't provided." to the player
			send "&cset <tag> <value>:&7 Sets 'tag' to 'value' on the target." to the player
			send "&cadd <nbt>:&7 Adds everything after 'add' as NBT to the target, curly braces not required. e.g. /nbt add Health:3, NoAI:1, Silent:1" to the player
			stop


#= Make sure people don't get stuck with full knockback resistance
# We have multiple things that give player temp KBR, so this is a "just in case"
on join:
	add "{Attributes:[{Base:0.0d,Name:""generic.knockbackResistance""}]}" to NBT of player


#= Name storage in variables
# Useful for converting a UUID to a name without having to parse as an offline player, which is slower and more prone to errors.
on join:
	# Add a delay so other scripts can catch that the player is logging in with a new name
	wait 1 tick
	set {name::%player's uuid%} to "%player%"


#= Store player entity ID from connection packet
# This ID is necessary as it is used in many other packets
on packet event play_server_login:
	set {Packet::PlayerID::%uuid of player%} to int pnum 0 of event-packet
on quit:
	delete {Packet::PlayerID::%uuid of player%}


#= Add /whowas for checking name history
# Useful to see who someone is after a name change (that probably goes without saying)
command /whowas <offline player>:
	permission: skript.mod
	aliases: namehistory
	trigger:
		set {_uuid} to "%offline player-argument's UUID%"
		replace all "-" in {_uuid} with ""
		set {_results::*} to contents from url "https://api.mojang.com/user/profiles/%{_uuid}%/names"
		replace all """" in {_results::1} with ""
		set {_results::*} to {_results::1} split at "},{"
		
		send "%nl%&6&l%offline player-argument%'s Name History:" to the command sender
		loop {_results::*}:
			# Ensure this value even contains the 'name' tag, otherwise it's just junk left over from the split
			"%loop-value%" contains "name"
			
			# If there's no 'changedToAt' in the looped value, it's the original name, so we don't need to parse out the time change
			if "%loop-value%" doesn't contain "changedToAt":
				set {_val} to loop-value
				replace all "[{name:" and "}]" in {_val} with ""
				send "&8[&7%loop-index%&8] &6%{_val}% &c(Original)" to the command sender
			
			# Otherwise they changed FROM another name TO this one at some point, so we have to parse out the time
			else:
				set {_parsedResult::*} to loop-value split at ",changedToAt:"
				replace all "name:" in {_parsedResult::1} with ""
				replace all "}]" in {_parsedResult::2} with ""
				
				set {_changeTime} to convert unix ("%{_parsedResult::2}%" parsed as number) to date
				send "&8[&7%loop-index%&8] &6%{_parsedResult::1}% &c(%{_changeTime}%)" to the command sender
		
			delete {_changeTime}
			delete {_parsedResult::*}
	
		send "" to the command sender


#= Require warps to be set with an owner, and store that owner
on command:
	if "%command%" is "setwarp" or "createwarp":
		player has permission "skript.admin"
		set {_args::*} to arguments split at " "
		
		# If there's only not two arguments, they certainly didn't provide both a warp name and owner
		if size of {_args::*} < 2:
			send "&cYou must provide a name for the owner of the warp, e.g. &7/%command% %{_args::1}% %player%&c would denote that this is your warp. Use 'Staff' for staff/server warps." to the player
			cancel event
			stop
		
		# If they denoted the warp as being owned by staff, we can just add it to the staff list
		if {_args::2} is "Staff" or "Admin":
			add {_args::1} to {warpsOwnedBy::Staff::*}
			set {warpOwners::%{_args::1}%} to "Staff"
		# Otherwise, they're trying to say it's a player, so we need to check if they've actually ever joined
		else:
			set {_pUUID} to UUID of ("%{_args::2}%" parsed as offline player)
			if {name::%{_pUUID}%} is set:
				add {_args::1} to {warpsOwnedBy::%{_pUUID}%::*}
				set {warpOwners::%{_args::1}%} to {_pUUID}
			else:
				send "&cNo player currently named %{_args::2}% has played here. They may have changed their name, which you can check at https://namemc.com/." to the player
				cancel event
	else if "%command%" is "warp":
		first 3 characters of "%arguments%" is "aaa"
		player doesn't have permission "skript.mod"
		cancel event
		send "&cError:&4 That warp does not exist." to the player

on command:
	"%command%" is "delwarp", "remwarp" or "rmwarp"
	player has permission "skript.admin"
	set {_args::*} to arguments split at " "
	set {_owner} to {warpOwners::%{_args::1}%}
	remove all {_args::1} from {warpsOwnedBy::%{_owner}%::*}
	delete {warpOwners::%{_args::1}%}

command /checkwarp [<text="owner">] <text>:
	permission: skript.mod
	aliases: checkwarps
	trigger:
		if arg-1 is "owner", "getowner" or "checkowner":
			set {_owner} to {name::%{warpOwners::%arg-2%}%}
			if {_owner} is set:
				send "&6The warp &c%arg-2%&6 is owned by &c%{_owner}%&6." to the command sender
			else:
				send "&cNo owner is registered for '%arg-2%'." to the command sender
		
		else if arg-1 is "ownedby":
			if arg-2 is "Staff" or "Admin":
				set {_pUUID} to "Staff"
			else:
				set {_pUUID} to UUID of (arg-2 parsed as offline player)
				
			if {name::%{_pUUID}%} is set:
				send "&6%{name::%{_pUUID}%}% owns the following warps: &c%{warpsOwnedBy::%{_pUUID}%::*}%" to the command sender
			else:
				send "&cNo player currently named %arg-2% has played here. They may have changed their name, which you can check at https://namemc.com/." to the player

# Add a region naming convention to force people to warp
on region enter:
	"%region%" contains "ForceWarp"
	player's gamemode is survival or adventure
	set {_rg} to "%region%"
	set {_warpParse::*} to {_rg} parsed as "ForceWarp%text%"
	add "{FallDistance:0}" to NBT of player
	player command "warp %{_warpParse::1}%"



#= Transfer BlockEntityTag info to placed chests for admins
on place of chest or trapped chest:
	player has permission "skript.admin"
	player's gamemode isn't creative
	if player's tool is a chest or trapped chest:
		set {_t} to tag "BlockEntityTag" of nbt of player's tool
	else:
		set {_t} to tag "BlockEntityTag" of nbt of player's offhand tool
	"%{_t}%" isn't "<none>"
	wait 1 tick
	block at event-location is chest or trapped chest
	add "%{_t}%" to nbt of block at event-location


#= Allows searching through all players for names that contain a certain filter term.
command /searchplayers <text> [<integer=1>]:
	permission: skript.mod
	usage: /searchplayers <filter> [<page number>]
	trigger:
		loop {name::*}:
			"%loop-value%" contains text-argument
			add 1 to {_resultCount}
			add "&c%{_resultCount}%. &6%loop-value% (&e%loop-index%&6)" to {_results::*}
		set {_page} to clamp(integer-argument, 1, ceil(size of {_results::*}/10))
		if size of {_results::*} > 0:
			send "&6Player Names Containing '&c%text-argument%&6' (%{_page}%/%ceil(size of {_results::*}/10)%):"
			loop page {_page} of {_results::*} with 10 lines:
				send "%loop-value%"
		else:
			send "&cNo players found with name containing '%text-argument%'."


#= Always make sure people are in the correct gamemode when entering a survival world
on "org.bukkit.event.player.PlayerTeleportEvent":
	event isn't cancelled
	check |event.getPlayer()'s gamemode is adventure or spectator| -> |event.getTo().getWorld().getName() isn't "Soulthief"| -> |event.getFrom().getWorld().getName() is "Soulthief"|
	event.getPlayer().setGameMode({GameMode}.SURVIVAL!);


#= Attempted patch for 1.12 dupe bug
on script load:
	delete {lastSetSlot::*}
	delete {lastSlotUse::*}
on packet event play_server_set_slot:
	{lastSlotUse::%player%} isn't set
	set {lastSetSlot::%player%} to now
	set {_now} to {lastSetSlot::%player%}
	wait 1 second
	{lastSetSlot::%player%} is {_now}
	delete {lastSetSlot::%player%}
on pickup:
	if {lastSetSlot::%player%} is set:
		cancel event
	else:
		set {lastSlotUse::%player%} to now
		set {_now} to {lastSlotUse::%player%}
		wait 1 tick
		{lastSlotUse::%player%} is {_now}
		delete {lastSlotUse::%player%}
#on pickup:
#	tag "Age" of NBT of dropped item is 40
#	set {_item} to 1 of first element of items within entity dropped item
#	set {_numInv} to number of {_item} in player's inventory
#	set {_numItem} to amount of first element of items within entity dropped item
#	set {_total} to ({_numInv} + {_numItem})
#	wait 2 ticks
#	set {_diff} to number of {_item} in player's inventory - {_total}
#	if {_diff} > 0:
#		remove {_diff} of {_item} from player's inventory


#= Force people to be in adventure mode in spawn
function fixGamemode(p: player):
	if "%{_p}'s world%" is "spawn":
		if "%region at {_p}%" doesn't contain "forcesurvival", "market", "shop", "dorm", "arcade", "fabledarmory", "metamorphictree" or "spleef":
			{_p}'s gamemode is survival
			set {_p}'s gamemode to adventure
		else if {_p}'s gamemode is adventure:
			set {_p}'s gamemode to survival
	else if isASurvivalWorld({_p}'s world) is true:
		{_p}'s gamemode is adventure
		set {_p}'s gamemode to survival
on teleport:
	wait 2 ticks
	fixGamemode(player)
on region enter:
	wait 2 ticks
	fixGamemode(player)
on region exit:
	wait 2 ticks
	fixGamemode(player)
on join:
	fixGamemode(player)
