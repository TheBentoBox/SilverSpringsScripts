# @desc:			Creates a string representing the components of a location for use in console commands.
# @params:	loc: The location to create a string for.
#						xOff: The offset to apply to loc's x coordinate. Optional. Defaults to 0.
#						yOff: The offset to apply to loc's y coordinate. Optional. Defaults to 0.
#						zOff: The offset to apply to loc's z coordinate. Optional. Defaults to 0.
# @returns:		The string representing the three components of the location with the offset applied.
function locString(loc: location, xOff: number = 0, yOff: number = 0, zOff: number = 0) :: string:
	return "%{_loc}'s x location + {_xOff}% %{_loc}'s y location + {_yOff}% %{_loc}'s z location + {_zOff}%"

# @desc:			Turns a location string into a location. Expected format is normal Skript location string ("x: X, y: Y, z: Z")
# @params:	string: The string to parse into a location.
# 				world:	The name of the world the location should be in (as location strings normally don't display this)
function locFromString(string: text, world: text) :: location:
	set {_parts::*} to {_string} parsed as "x: %number%, y: %number%, z: %number%"
	if size of {_parts::*} is 3:
		return location({_parts::1}, {_parts::2}, {_parts::3}, world({_world}))
	else:
		return location(0, 0, 0, world({_world}))
		send "ERROR: Invalid location string '%{_string}%' sent to locFromString." to console

# @desc:			Returns a location with the correct offsets north/south, east/west, or up/down
# Prefers north/east but can use negative to get opposite (negative for NSoff gives south)
function locOffset(loc: location, NSoff: number = 0, EWoff: number = 0, UDoff: number = 0) :: location:
	return location {_NSoff} meters north and {_EWoff} meters east and {_UDoff} meters above {_loc}
	
# @desc:			Same as above but local for the entity's facing (so north/south becomes forward/back),
# east/west becomes left/right, etc. isHorizontal controls if the forward/back should be horizontal
# (AKA independent of pitch).
function locOffsetRel(e: entity, FBoff: number = 0, LRoff: number = 0, UDoff: number = 0, isHorizontal: boolean = false) :: location:
	if {_isHorizontal} is true:
		return location {_FBoff} meters horizontally in front of and {_LRoff} meters east and {_UDoff} meters above {_e}
	else:
		return location {_FBoff} meters in front of and {_LRoff} meters east and {_UDoff} meters above {_e}



# @desc:			Plays the provided sound name at a location.
# @params:	p: The player to play the sound from (vanilla commands need to execute relative to a player.)
#						sound: The name of the sound file to be played.
#						category: The category which the sound should draw its volume from.
#						loc: The location the sound should be played at.
#						vol: The volume the sound should be played at, should be between 0 and 2. Optional. Defaults to 1.
#						pitch: The pitch the sound should be played at, should be between 0 and 2. Optional. Defaults to 1.
#						selector: A command selector text of who should be able to hear the sound. Optional. Defaults to all players within 100 blocks of the play location.
function playsound(sound: text, category: text, loc: location, vol: number = 1, pitch: number = 1, selector: text = "@a[r=100]"):
	loop players in world of {_loc}:
		distance between {_loc} and loop-player <= 100
		execute console command "execute %loop-player% ~ ~ ~ /playsound %{_sound}% %{_category}% %{_selector}% %locString({_loc})% %{_vol}% %{_pitch}%"
		stop loop



# @desc:			Spawns particles at the provided location.
# @params:	p: The player to play the sound from (vanilla commands need to execute relative to a player.)
#						particle: The name of the particle that should be spawned.
#						loc: The location the particles should be spawned at.
#						count: The number of particles to spawn. Optional. Defaults to 25.
#						xd: The randomization to apply to the x spawn location. Optional. Defaults to 0.
#						yd: The randomization to apply to the y spawn location. Optional. Defaults to 0.
#						zd: The randomization to apply to the z spawn location. Optional. Defaults to 0.
#						speed: The speed the particle should move at. Optional. Defaults to 0.05.
#						mode: The mode of the particle, either "normal" or "force", which forces clients with low particle settings to render it. Optional. Defaults to "normal".
#						selector: A command selector text of who should be able to see the particles. Optional. Defaults to all players.
#						params: The parameters for the particle, only relevent for blockdust, blockcrack, and iconcrack, where it represents the block/icon ID and data value, respectively. Optional. Defaults to "0 0".
function particle(particle: text, loc: location, count: integer = 25, xd: number = 0, yd: number = 0, zd: number = 0, speed: number = 0.05, mode: text = "normal", selector: text = "@a", params: text = "0 0"):
	loop players in {_loc}'s world:
		distance between {_loc} and loop-player <= 100
		execute console command "execute %loop-player% ~ ~ ~ /particle %{_particle}% %locString({_loc})% %{_xd}% %{_yd}% %{_zd}% %{_speed}% %{_count}% %{_mode}% %{_selector}% %{_params}%"
		stop loop



# @desc:			Drops the provided item at the provided location with a randomized offset. Can't be picked up and despawns after itemDuration ticks.
#	@params:	loc: The location to drop the item at.
#						item: The item type to drop. Provide it as a Skript itemstack.
# 						randomOffset: The randomization to apply to the spawn location on each axis. Optional. Defaults to 1.5.
#						itemDuration: How many ticks the items should exist for before despawning. Optional. Defaults to 20 (one second).
function decorativeItemDrop(loc: location, item: item, randomOffset: number = 1.5, itemDuration: integer = 20):
	add random number between -1*{_randomOffset} and {_randomOffset} to {_loc}'s x location
	add random number between -1*{_randomOffset} and {_randomOffset} to {_loc}'s y location
	add random number between -1*{_randomOffset} and {_randomOffset} to {_loc}'s z location
	drop {_item} at {_loc}
	loop dropped items in radius 2 of {_loc}'s location:
		items within entity loop-entity is {_item}
		add "{PickupDelay:32767,Age:%6000 - {_itemDuration}%}" to nbt of loop-entity



# @desc:			Tells you whether or not a world is a normal SSS survival world (one of the main worlds or a resource world).
# @params:	w: The world to check agains.
# @returns:		True if the world is a normal survival world, false if otherwise.
function isASurvivalWorld(w: world) :: boolean:
	if "%{_w}%" contains "world" or "resource":
		return true
	else:
		return false



# @desc:			Returns a version of the provided number clamped between min and max.
# @params:	n: The number to clamp.
# 						min: The minimum to return (if n is less than min, it'll return min).
# 						max: The maximum to return (if n is greater than min, it'll return max).
# @returns:		The clamped value of n.
function clamp(n: number, min: number, max: number) :: number:
	if {_n} < {_min}:
		set {_n} to {_min}
	else if {_n} > {_max}:
		set {_n} to {_max}
		
	return {_n}



# @desc:			Executes `wait 0 ticks` to simulate nothing happening, as Skript has no effect for loops like `continue`.
# @params:	n: Completely useless and unused, but Skript functions require at least one parameter.
function doNothing(n: number = 0):
	wait 0 ticks



# @desc:			Spawns particles and plays a sound effect at a location, used for custom scripted bonemeal effects.
# @params:	p: The player to execute the effects from (vanilla commands need to execute relative to a player.)
#						loc: The location to play the effect at.
function bonemealEffect(loc: location):
	particle("happyVillager", {_loc}, 10, 0.15, 0.15, 0.15, 0)
	playsound("block.enchantment_table.use", "block", {_loc}, 0.125, 2)



# @desc:			Returns the number of free slots in the player's inventory.
# @params:	p: The player to check for the number of free spaces.
#						countArmorSlots: Whether or not open armor slots should count as free slots. Optional. Defaults to false.
# @returns:		The number of free slots in the player's inventory.
function getFreeSpace(p: player, countArmorSlots: boolean = false) :: number:
	set {_space} to amount of air in {_p}'s inventory

	if {_countArmorSlots} is false:		
		if "%{_p}'s helmet%" is "<none>":
			subtract 1 from {_space}
		if "%{_p}'s chestplate%" is "<none>":
			subtract 1 from {_space}
		if "%{_p}'s leggings%" is "<none>":
			subtract 1 from {_space}
		if "%{_p}'s boots%" is "<none>":
			subtract 1 from {_space}
		
	if "%{_p}'s offhand tool%" is "0 air":
		subtract 1 from {_space}
	
	return {_space}



# @desc:			Sends the provided message to all players with the specific permission.
# @params:	msg: The message to send.
#						perm: The permission which should be required.
function sendWithPerms(msg: text, perm: text):
	loop players:
		if loop-player has permission "%{_perm}%":
			send "%{_msg}%" to loop-player

# @desc:			Returns all players in a specific region.
function playersInRegion(region: text) :: players:
	loop players:
		if "%region at loop-player%" contains "%{_region}%":
			add loop-player to {_returns::*}
	return {_returns::*}

# @desc:			Sends the provided message to all players in the specified region.
function sendInRegion(msg: text, region: text):
	loop players:
		if "%region at loop-player%" contains "%{_region}%":
			send "%{_msg}%" to loop-player



# @desc:			Makes the given entity look at a specific location.
# @params:	e: The entity that will do the looking.
#						loc: The location which the entity should look towards.
function makeLook(e: living entity, loc: location):
	set {_xD} to {_loc}'s x location - {_e}'s x location
	set {_yD} to {_loc}'s y location - {_e}'s y location
	set {_zD} to {_loc}'s z location - {_e}'s z location
	set {_yaw} to atan2({_xD}, {_zD}) - 90
	
	set {_adj2} to ({_xD}*{_xD}) + ({_zD}*{_zD})
	set {_parallel} to sqrt({_adj2})
	set {_pitch} to atan2({_yD}, {_parallel}) - 90
	
	add "{Rotation:[%{_yaw}%f, %{_pitch}%f]}" to NBT of {_e}



# @desc:			Takes a number in seconds and returns it as a presentable time string.
#						e.g. An arg of 123 would return "2 minutes and 3 seconds"
# @params:	seconds: The number of seconds to parsed into the timespan
# @returns:		The presentable time as a string.
function secondsToTimespan(seconds: number) :: text:
	set {_daysAndHours} to "%{_seconds} - mod({_seconds}, 3600)% seconds" parsed as a timespan
	set {_minutesAndSeconds} to "%mod({_seconds}, 3600)% seconds" parsed as a timespan
	set {_daysAndHours} to "%{_daysAndHours}%"
	replace all " and " in {_daysAndHours} with ", "
	
	if "%{_daysAndHours}%" is "0 seconds":
		return "%{_minutesAndSeconds}%"
	else:
		return "%{_daysAndHours}%, %{_minutesAndSeconds}%"



# @desc:			Sends the client a cooldown for an item type, displays for them like the ender pearl CD or shield disable.
#						Note that this doesn't stop them from actually using the item, but it stops the arm swing use-attempt animation.
#	@params:	p: player to send the cooldown to
#						i: the item type to disable (e.g. "slimeball", not "player's tool")
#						duration: how many ticks to disable the item for
function setCooldown(p: player, itemType: item, duration: timespan):
	set {_packet} to new play_server_set_cooldown packet
	set "item" pinfo 0 of {_packet} to {_itemType}
	set int pnum 0 of {_packet} to ({_duration} converted into ticks)
	send packet {_packet} to {_p}



# @desc:			Tries to give items to a player, and if they can't hold them, it drops it all at their feet instead.
# @params:	p: player to give the item to
#						i: the items to drop
function safelyGive(p: player, i: items, playEffects: boolean = true) :: boolean:
	set {_pUUID} to {_p}'s UUID
	set {_heldAll} to true
	if {_playEffects} is true:
		execute({_p}, "playsound entity.item.pickup player @a")
	loop {_i::*}:
		set {_maxStackSize} to max stack size of loop-value
		if check | "%{_p}'s world%" is "Soulthief" | -> | "%region at {_p}%" contains "arena" or "laputa" |:
			add loop-value to {itemQueue::%{_pUUID}%::*}
			set {_heldAll} to false
		else if {_p} can hold loop-value:
			give loop-value to {_p}
		else:
			set {_heldAll} to false
			if amount of loop-value > {_maxStackSize}:
				drop (amount of loop-value mod {_maxStackSize}) of loop-value at {_p}'s head
				loop floor(amount of loop-value/{_maxStackSize}) times:
					drop {_maxStackSize} of loop-value-1 at {_p}'s head
			else:
				drop loop-value at {_p}'s head
	return {_heldAll}


# @desc			Plays the arm swing animation on a player.
# @parmas:	p: the player whose arm should swing
#						useOffhand: whether
function playArmSwing(p: player, useOffhand: boolean = false):
	set {_pUUID} to {_p}'s UUID
	{Packet::PlayerID::%{_pUUID}%} is set
	set {_swing} to new play_server_animation packet
	set int pnum 0 of {_swing} to {Packet::PlayerID::%{_pUUID}%}
	if {_useOffhand} is true:
		set int pnum 1 of {_swing} to 3
	loop players in {_p}'s world:
		send packet {_swing} to loop-player


# @desc			Properly checks if a list contains something, since Skript's contains check sucks
function listContains(list: objects, value: object) :: boolean:
	if "%{_list::*}%" is "<none>":
		return false
	loop {_list::*}:
		if loop-value is {_value}:
			return true
	return false


# @desc			Returns a display name for an item: its custom name if it's been renamed, or its normal name otherwise
function getDisplayName(itemsToDisplay: items) :: texts:
	loop {_itemsToDisplay::*}:
		set {_i} to (amount of loop-value) of loop-value
		disenchant {_i}
		set {_name} to tag "display" of NBT of {_i}
		set {_name} to "%tag ""Name"" of {_name}%"
		if {_name} isn't "<none>":
			if item amount of {_i} > 1:
				add "%item amount of {_i}% %{_name}%" to {_returns::*}
			else:
				add "%{_name}%" to {_returns::*}
		else:
			set {_i} to type of "%{_i}%" parsed as item
			add "%{_i}%" to {_returns::*}
		
		delete {_name}
	
	return {_returns::*}


# @desc		Gets the armor value of an entity
function getArmorValue(e: living entity) :: number:
	set {_total} to 0
	set {_types::*} to "%type of {_e}'s helmet%", "%type of {_e}'s chestplate%", "%type of {_e}'s leggings%" and "%type of {_e}'s boots%"
	loop ({_e}'s helmet, {_e}'s chestplate, {_e}'s leggings and {_e}'s boots):
		add 1 to {_index}
		set {_armorVal} to 0
		set {_modifiers} to "%tag ""AttributeModifiers"" of NBT of loop-value%"
		
		if "%{_modifiers}%" contains "generic.armor":
			delete {_modifiers::*}
			set {_modifiers::*} to {_modifiers} split at "},{"
			loop integers from 1 to size of {_modifiers::*}:
				"%{_modifiers::%loop-number%}%" contains "generic.armor"
				"%{_modifiers::%loop-number%}%" doesn't contain "armorToughness"
				set {_split::*} to {_modifiers::%loop-value-2%} split at "Amount:"
				set {_splitBack::*} to {_split::2} split at ","
				replace all "d" in {_splitBack::1} with ""
				set {_armorVal} to "%{_splitBack::1}%" parsed as an integer
				#exit loop
		else:
			set {_armorVal} to {socket::defaultArmorValue::%{_types::%{_index}%}%}
		
		add {_armorVal} to {_total}
	return {_total}


# @desc		Gets the XP multiplier for a certain entity type directly from the mcMMO config
function getMCMMOMultiplier(e: entity) :: number:
	if {_e} isn't a living entity:
		return 0
	else:
		set {_type} to first char in each word of "%{_e}%" to caps
		replace all " " in {_type} with ""
		set {_val} to yaml value "Experience.Combat.Multiplier.%{_type}%" from file "plugins/mcMMO/experience.yml"
		if {_val} is set:
			return "%{_val}%" parsed as number
		else:
			return 1


# @desc 		Returns a string of "hostile", "neutral", or "passive" representing the hostility level of an entity.
# The optional boolean (defaulting to false) determines if we should check situationally (AKA, if the mob is CURRENTLY
# hostile, not by default, e.g. a llama currently spitting at a player)
function getHostility(e: living entity, situational: boolean = true) :: text:
	set {_type} to "%{_e}.getType()%"
	set {_hostiles::*} to "CREEPER", "ELDER_GUARDIAN", "ENDERMITE", "EVOKER", "GHAST", "GUARDIAN", "HUSK", "MAGMA_CUBE", "SHULKER", "SILVERFISH", "SKELETON", "SLIME", "STRAY", "VEX", "VINDICATOR", "WITCH", "WITHER_SKELETON", "ZOMBIE", "ZOMBIE_VILLAGER", "ILLUSIONER", "ENDER_DRAGON" and "WITHER"
	set {_neutrals::*} to "CAVE_SPIDER", "ENDERMAN", "IRON_GOLEM", "LLAMA", "OCELOT", "PIG_ZOMBIE", "POLAR_BEAR", "SPIDER" and "WOLF"
	if listContains({_hostiles::*}, {_type}) is true:
		return "hostile"
	else if listContains({_neutrals::*}, {_type}) is true:
		if {_situational} is true:
			{_e}'s target is a player
			return "hostile"
		if {_type} is "POLAR_BEAR":
			{_e}.isAdult() is false
			return "passive"
		else:
			return "neutral"
	else:
		return "passive"


# @desc		Rotates an entity's yaw and pitch by the given amounts. Doesn't work on players.
function rotateEntity(e: living entity, yawRotate: number, pitchRotate: number = 0):
	set {_oldRotations::*} to split "%tag ""Rotation"" of NBT of {_e}%" at "f,"
	replace all "[" and "f]" in {_oldRotations::*} with ""
	set {_yawRotate} to ({_oldRotations::1} parsed as number) + {_yawRotate}
	set {_pitchRotate} to ({_oldRotations::2} parsed as number) + {_pitchRotate}
	add "{Rotation:[%{_yawRotate}%f,%{_pitchRotate}%f]}" to NBT of {_e}


# @desc 		Runs {_command} as a console /execute from {_p}.
# Not sure about this one but wanted to see if it felt better to use.
function execute(p: player, command: text):
	console command "execute %{_p}% ~ ~ ~ %{_command}%"


# @desc		Adds NBT to an item within a dropped item, which normally doesn't work very well.
function addDropNBT(drop: entity, NBT: text):
	{_drop} is a dropped item
	set {_items::*} to items within entity {_drop}
	set {_dropNBT} to NBT of {_items::1}
	if first character of {_NBT} is "{":
		add "%{_NBT}%" to {_dropNBT}
	else:
		add "{%{_NBT}%}" to {_dropNBT}
	set {_items::1} to {_items::1} with custom NBT "%{_dropNBT}%"
	set items within entity {_drop} to {_items::1}


# @desc		Returns true if two items are the same type and have the same lore.
function safelyCompare(i1: item, i2: item) :: boolean:
	if {_i1}.getType() is {_i2}.getType():
		"%{_i1}'s lore%" contains "%{_i2}'s lore%"
		return true
	return false


# @desc		Returns the location roughly where a player's hand appears to be from their POV.
function getHandLoc(p: player) :: location:
	return the location 0.65 meters right and 0.75 meters in front and 1.4 meters above {_p}


# @desc		Returns a list with the given indices set to the given values (mapped 1-to-1)
# NOTE: does NOT currently work due to a Skript bug (lists returned from functions don't keep index)
function getMappedList(indices: objects, values: objects) :: objects:
	loop {_indices::*}:
		set {_val} to "%loop-value%"
		set {_return::%{_val}%} to {_values::%loop-index%}
	if size of {_values::*} > size of {_indices::*}:
		loop integers from (size of {_indices::*} + 1) to size of {_values::*}:
			add {_values::%loop-value%} to {_return::*}
	loop {_return::*}:
		send "%loop-index%::%loop-value%" to "Mr_Simba" parsed as player
	return {_return::*}


# @desc		Sends a message with a specific line on either side
function sendBordered(p: player, msg: text, border: text = ""):
	send "%{_border}%" to {_p}
	send "%{_msg}%" to {_p}
	send "%{_border}%" to {_p}
