function playtimeParse(playtime: number) :: text:		
	set {_daysAndHours} to "%{_playtime} - mod({_playtime}, 3600)% seconds" parsed as a timespan
	set {_minutesAndSeconds} to "%mod({_playtime}, 3600)% seconds" parsed as a timespan
	set {_daysAndHours} to "%{_daysAndHours}%"
	replace all " and " in {_daysAndHours} with ", "
	
	return "%{_daysAndHours}%, %{_minutesAndSeconds}%"
	

command /playtime <text="%player%"> [<text="1">]:
	executable by: players and console
	trigger:
		if argument 1 is "check":
			player has permission "skript.admin"
			send "&6The following players have recently hit 20 hours of playtime: &c%{fullday::*}%"
			stop
		else if argument 1 is "clear":
			if player has permission "skript.admin":
				clear {fullday::*}
				send "&6Cleared 20 hour playtime list."
			stop
		else if argument 1 is "rank":
			if argument 2 is "1":
				set {_arg} to player
			else:
				set {_arg} to ("%arg 2%" parsed as an offline player)
			set {_argUUID} to {_arg}'s uuid
		
			set {_topList} to "%{playtime::*} sorted%"
			replace all "[" and "]" in {_topList} with ""
			set {_topList::*} to {_topList} split at ", "
			
			set {_s} to size of {_topList::*}
			loop {_s} times:
				"%{_topList::%loop-number%}%" is "%{playtime::%{_argUUID}%}%"
				if "%{_argUUID}%" is "%player's uuid%":
					send "&6Your playtime postion: &c##%{_s} - loop-number + 1%"
				else:
					send "&6%{_arg}%'s playtime postion: &c##%{_s} - loop-number + 1%"
				stop
			send "&cAn error occurred finding the playtime rank. Tell an admin!"
			stop

		else if argument 1 is "top":
			set {_pg} to arg-2 parsed as an integer
			if {_pg} isn't set:
				set {_pg} to 1
				
			set {_start} to size of {playtime::*} - (({_pg} - 1)*10)
			
			loop {playtime::*}:
				add loop-index to {_values::%loop-value%::*}

			set {_topList} to "%{playtime::*} sorted%"
			replace all "[" and "]" in {_topList} with ""
			set {_topList::*} to {_topList} split at ", "

			send "&c&m---=&6 Highest Playtimes &c&m=---"
			loop 10 times:
				set {_topList::%{_start}%} to "%{_topList::%{_start}%}%" parsed as an integer
				loop {_values::%{_topList::%{_start}%}%::*}:
					send "&8[&7%size of {playtime::*} - {_start} + 1%&8] &6%{name::%loop-value-2%}%: &c%playtimeParse({_topList::%{_start}%})%"
					remove all loop-value-2 from {_values::%{_topList::%{_start}%}%::*}
					subtract 1 from {_start}
			stop
			
		set {_arg} to ("%arg 1%" parsed as an offline player)
		set {_argUUID} to {_arg}'s uuid

		if {_arg} isn't online:
			if player doesn't have permission "skript.mod":
				send "&4Player not found."
				stop
				
		else if "%vanish state of {_arg}%" is "true":
			if player doesn't have permission "skript.mod":
				send "&4Player not found."
				stop
			
		set {_playtime} to {playtime::%{_argUUID}%}

		if "%{_playtime}%" is "<none>":
			send "&cThe player '%argument 1%' has never joined this server."
			stop
		
		if command sender is console:
			send "&6%{_arg}%'s playtime:&c %playtimeParse({_playtime})%" to console
		else if {_arg} is player:
			send "&6Your playtime:&c %playtimeParse({_playtime})%" to the player
		else:
			send "&6%{_arg}%'s playtime:&c %playtimeParse({_playtime})%" to the player
			
every 1 second:
	loop players:
		if loop-player is afk:
			wait 0 ticks
		else:
			add 1 to {playtime::%loop-player's uuid%}
		
		if {playtime::%loop-player's uuid%} is 72000:
			if loop-player has permission "skript.member":
				stop
			add "%loop-player%" to {fullday::*}

on login:
	if {playtime::%player's uuid%} isn't set:
		set {playtime::%player's uuid%} to {playtime.%player's uuid%}

on command "/rank":
	set {_args::*} to arguments split at " "
	remove all {_args::1} from {fullday::*}

on command "/pex":
	set {_args::*} to arguments split at " "
	{_args::1} is "user"
	{_args::3} is "group"
	{_args::4} is "set"
	remove all {_args::2} from {fullday::*}